from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import pandas as pd
from src.survey_for_training import check_training, EXCEL_FILE_TRAINING, EXCEL_FILE_DIET, create_new_training_keyboard, create_goal_keyboard, TrainingSurvey
from src.utils import remove_user


class MyPlanStates(StatesGroup):
    plan_operation = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫


def create_my_training_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üÜï", callback_data="new_plan")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üóëÔ∏è", callback_data="remove_plan")],
    ])


def get_plan(user_id: str):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    user_id = str(user_id).strip()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    trainings_df = pd.read_excel(EXCEL_FILE_TRAINING)
    diets_df = pd.read_excel(EXCEL_FILE_DIET)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É ID –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    trainings_df["ID"] = trainings_df["ID"].astype(str).str.strip()
    diets_df["ID"] = diets_df["ID"].astype(str).str.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    training_plan = trainings_df[trainings_df["ID"] == user_id]
    diet_plan = diets_df[diets_df["ID"] == user_id]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    plan_text = ""

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω
    plan_text += "üìã –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
    for day, day_name in zip(days_of_week, day_names):
        exercises = training_plan.iloc[0].get(day)
        if pd.notna(exercises):
            plan_text += f"{day_name}:\n{exercises}\n\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω
    plan_text += "üçΩÔ∏è –î–∏–µ—Ç–∞:\n\n"
    for day, day_name in zip(days_of_week, day_names):
        meals = diet_plan.iloc[0].get(day)
        if pd.notna(meals):
            plan_text += f"{day_name}:\n{meals}\n\n"

    return plan_text.strip()


async def show_plan(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if check_training(user_id):
        plan = get_plan(user_id)
        await message.answer(
            f"–í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:\n\n{plan}",
            reply_markup=create_my_training_keyboard())
        await state.set_state(MyPlanStates.plan_operation)
        
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –•–æ—Ç–∏—Ç–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å?",
            reply_markup=create_new_training_keyboard()
        )
        await state.set_state(TrainingSurvey.new_training)


async def plan_operation(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    if callback_query.data == "new_plan":
        remove_user(EXCEL_FILE_TRAINING, user_id)
        remove_user(EXCEL_FILE_DIET, user_id)
        await callback_query.message.edit_text("–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω—ã–π –ø–ª–∞–Ω —É–¥–∞–ª—ë–Ω.")
        
        await callback_query.message.answer("–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?", reply_markup=create_goal_keyboard())
        await state.set_state(TrainingSurvey.goal)
        
    elif callback_query.data == "remove_plan":
        remove_user(EXCEL_FILE_TRAINING, user_id)
        remove_user(EXCEL_FILE_DIET, user_id)
        await callback_query.message.edit_text("–í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω—ã–π –ø–ª–∞–Ω —É–¥–∞–ª—ë–Ω.")
