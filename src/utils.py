import os
from dotenv import load_dotenv
import pandas as pd
import json
import random
import asyncio
from aiogram import types


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
'''
def get_bot_token() -> str:
    load_dotenv()
    token = os.getenv("BOT_TOKEN")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not token:
        raise ValueError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ .env")
    return token


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç) —Ç–∞–±–ª–∏—Ü—ã
'''
def create_table(file_path: str, colums: list[str]) -> None:
    if not os.path.exists(file_path):
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        df = pd.DataFrame(columns=colums)
        df.to_excel(file_path, index=False)


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
'''
def remove_user(file_path: str, user_id: str) -> None:
    # –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Excel
    df = pd.read_excel(file_path)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É 'ID' –∏ –∑–Ω–∞—á–µ–Ω–∏–µ user_id –∫ –µ–¥–∏–Ω–æ–º—É —Ç–∏–ø—É –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    df["ID"] = df["ID"].astype(str).str.strip()
    user_id = str(user_id).strip()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ user_id –Ω–µ —Ä–∞–≤–µ–Ω –∑–∞–¥–∞–Ω–Ω–æ–º—É
    df_filtered = df[df["ID"] != user_id]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    df_filtered.to_excel(file_path, index=False)



'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ò–ú–¢
'''
def calculate_bmi(height: int, weight: int) -> float:
    bmi = weight / (height / 100) ** 2
    return round(bmi, 1)    # —á—Ç–æ–±—ã –±—ã–ª–∞ 1 —Ü–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò –≤ json
'''
def str_to_json(raw_string: str):
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON –±–ª–æ–∫–∞
    start_index = raw_string.find("{")
    end_index = raw_string.rfind("}") + 1
    if start_index == -1 or end_index == -1:
        raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –±–ª–æ–∫
    json_block = raw_string[start_index:end_index]

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
    json_block = json_block.replace('"""', '"').replace("    ", "")

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –∑–∞–ø—è—Ç—ã–º–∏
    json_block = json_block.replace(", ", ",")

    parsed_json = json.loads(json_block)
    return parsed_json


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
'''
def format_exercise_info(key, exercise_data):
    data = exercise_data.get(key)
    if not data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –†–∞–∑–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –æ—à–∏–±–∫–∏ –∏ —Å—Å—ã–ª–∫—É
    
    description_errors, link = data.split(" –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ")
    description, errors = description_errors.split(" –ö–ª—é—á–µ–≤—ã–µ –æ—à–∏–±–∫–∏: ")
    errors_list = errors.split("; ")
    link_text = f"\n–í–∏–¥–µ–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {link.strip()}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    formatted_text = "\n".join([
        description.strip(),
        "\n–ö–ª—é—á–µ–≤—ã–µ –æ—à–∏–±–∫–∏:",
        *[f"- {error.strip()}" for error in errors_list],
        link_text
    ]).strip()

    return formatted_text


SPORT_QUOTES = [
    "–í –∂–∏–∑–Ω–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥–≤–µ –¥–æ—Ä–æ–≥–∏: –æ–¥–Ω–∞ ‚Äî –ø–µ—Ä–≤–∞—è, –∞ –¥—Ä—É–≥–∞—è ‚Äî –≤—Ç–æ—Ä–∞—è. üö∂‚Äç‚ôÇÔ∏è",
    "–ú—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –º—ã–º–∏, –∞ –æ–Ω–∏ ‚Äì –æ–Ω–∏–º–∏. üèãÔ∏è‚Äç‚ôÇÔ∏è",
    "–†–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–µ –≤–æ–ª–∫. –†–∞–±–æ—Ç–∞ ‚Äî –≤–æ—Ä–∫. –ê –≤–æ–ª–∫ ‚Äî —ç—Ç–æ —Ö–æ–¥–∏—Ç—å. üê∫",
    "–ú–∞—Ä–∏–∞–Ω—Å–∫—É—é –≤–ø–∞–¥–∏–Ω—É –∑–Ω–∞–µ—à—å? –≠—Ç–æ —è —É–ø–∞–ª. üèä‚Äç‚ôÇÔ∏è",
    "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –º–æ–π –¥–µ–¥, ¬´–Ø —Ç–≤–æ–π –¥–µ–¥¬ª.",
    "–°–ª–æ–≤–æ ‚Äî –Ω–µ –≤–æ—Ä–æ–±–µ–π. –í–æ–æ–±—â–µ –Ω–∏—á—Ç–æ –Ω–µ –≤–æ—Ä–æ–±–µ–π, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –≤–æ—Ä–æ–±—å—è. üê¶",
    "–í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç —Ö—É–∂–µ. ü§û",
    "–†–∞–±–æ—Ç–∞ –Ω–µ –≤–æ–ª–∫. –ù–∏–∫—Ç–æ –Ω–µ –≤–æ–ª–∫. –¢–æ–ª—å–∫–æ –≤–æ–ª–∫ –≤–æ–ª–∫. üê∫",
    "–ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–º–Ω–æ. üåö",
    "–¢—É—Ç ‚Äî —ç—Ç–æ –≤–∞–º –Ω–µ —Ç–∞–º. ü§∑‚Äç‚ôÇÔ∏è",
    "–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã –∑–Ω–∞–µ—à—å? –Ø –ø–æ—á–∏—Å—Ç–∏–ª. üèûÔ∏è",
    "–°–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞ –∑–Ω–∞–µ—à—å? –Ø —Å–∫–∞–∑–∞–ª. ü§ô",
    "–ù—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∫–∞–∫ –Ω—É–∂–Ω–æ, –∫–∞–∫ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –Ω–µ –Ω—É–∂–Ω–æ. ü§î",
]


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–∏—Ç–∞—Ç
'''
async def update_message_with_quotes(sent_message: types.Message, stop_event: asyncio.Event, header: str):
    while not stop_event.is_set():
        quote = random.choice(SPORT_QUOTES)

        try:
            await sent_message.edit_text(f"{header} ‚öôÔ∏è\n\n{quote}")
        except Exception:
            pass

        await asyncio.sleep(4)
