from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from apscheduler.triggers.cron import CronTrigger
from apscheduler.jobstores.base import JobLookupError
import pandas as pd
import datetime
from src.survey_for_training import EXCEL_FILE_TRAINING, EXCEL_FILE_DIET


scheduler = AsyncIOScheduler()
hours = (8, 18, 11)


def plan_for_today(user_id: int):
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    trainings_df = pd.read_excel(EXCEL_FILE_TRAINING)
    diets_df = pd.read_excel(EXCEL_FILE_DIET)

    # –°—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º ID
    trainings_info = trainings_df[trainings_df["ID"] == user_id]
    diets_info = diets_df[diets_df["ID"] == user_id]

    # –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    trainings_text = trainings_info.iloc[0].get(datetime.datetime.today().strftime("%A").lower())
    diets_text = diets_info.iloc[0].get(datetime.datetime.today().strftime("%A").lower())

    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    content = ""
    if pd.notna(trainings_text):
        content = "üèÉ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
        content += trainings_text
    else:
        content = "–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ü•±"
    
    content += "\n\nüçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\n"
    content += diets_text
    
    return content


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
def create_reminders_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data="turn_on_reminder")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å ‚ùå", callback_data="turn_off_reminder")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def show_reminders_menu(message: types.Message):
    user_id = message.from_user.id
    diets_df = pd.read_excel(EXCEL_FILE_DIET)

    if diets_df[diets_df["ID"] == user_id].empty:
        await message.answer(
            "–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏ –¥–æ–±–∏–≤–∞–π—Ç–µ—Å—å —É—Å–ø–µ—Ö–æ–≤ –≤–º–µ—Å—Ç–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! üèÜ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèãÔ∏è‚Äç‚ôÇÔ∏è", callback_data="new_training")]
            ])
        )
    else:
        keyboard = create_reminders_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_notification(bot: Bot, user_id: int):
    await bot.send_message(chat_id=user_id, text=plan_for_today(user_id))


async def enable_notifications(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id

    for hour in hours:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        scheduler.add_job(
            send_notification,
            CronTrigger(hour=hour, minute=45),
            args=[bot, user_id],
            id=f"notification_{user_id}_{hour}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
            replace_existing=True                 # –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        )
    
    await callback_query.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –∏ 18:00.")


async def disable_notifications(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id

    for hour in hours:
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            scheduler.remove_job(f"notification_{user_id}_{hour}")
        except JobLookupError:
            pass

    await callback_query.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå")

async def on_startup():
    scheduler.start()
