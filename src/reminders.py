from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from apscheduler.triggers.cron import CronTrigger
from apscheduler.jobstores.base import JobLookupError
from src.workout_survey import check_user_in_answers_set
import pandas as pd
import datetime
import time


# –ü—É—Ç–∏ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
EXCEL_FILE_TRAINING = "data/trainings.xlsx"
EXCEL_FILE_DIET = "data/diets.xlsx"

scheduler = AsyncIOScheduler()
notifications_enabled_users = set()

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
localtime_offset = time.localtime().tm_gmtoff // 3600
hours = (5+localtime_offset, 15+localtime_offset)


def check_user_in_reminders(user_id: int) -> bool:
    return user_id in notifications_enabled_users


def plan_for_today(user_id: int):
    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    trainings_text = training_for_today(user_id)
    content = ""

    if pd.notna(trainings_text):
        content = "üèÉ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
        content += trainings_text

    else:
        content = "–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ü•±"
    
    content += "\n\nüçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\n"
    content += diet_for_today(user_id)
    
    return content


def diet_for_today(user_id: int):
    diets_df = pd.read_excel(EXCEL_FILE_DIET)

    diets_info = diets_df[diets_df["ID"] == user_id]

    diets_text = diets_info.iloc[0].get(datetime.datetime.today().strftime("%A").lower())

    return diets_text


def training_for_today(user_id: int):
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    trainings_df = pd.read_excel(EXCEL_FILE_TRAINING)

    # –°—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º ID
    trainings_info = trainings_df[trainings_df["ID"] == user_id]

    # –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    trainings_text = trainings_info.iloc[0].get(datetime.datetime.today().strftime("%A").lower())

    return trainings_text


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
def create_reminders_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data="turn_on_reminder")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å ‚ùå", callback_data="turn_off_reminder")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def show_reminders_menu(message: types.Message):
    user_id = message.from_user.id
    diets_df = pd.read_excel(EXCEL_FILE_DIET)

    if diets_df[diets_df["ID"] == user_id].empty:
        await message.answer(
            "–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏ –¥–æ–±–∏–≤–∞–π—Ç–µ—Å—å —É—Å–ø–µ—Ö–æ–≤ –≤–º–µ—Å—Ç–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! üèÜ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèãÔ∏è‚Äç‚ôÇÔ∏è", callback_data="reminders_new_training")]
            ])
        )

    else:
        keyboard = create_reminders_keyboard()
        state_text = ""
        if check_user_in_reminders(user_id):
            state_text = "–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n–í–∫–ª—é—á–µ–Ω—ã ‚úÖ"
        else:
            state_text = "–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n–û—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        await message.answer(state_text + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_notification(bot: Bot, user_id: int, time_of_message: int):
    if time_of_message == hours[0]:
        await bot.send_message(chat_id=user_id, text=plan_for_today(user_id))

    else:
        trainings_text = training_for_today(user_id)

        if pd.notna(trainings_text) and check_user_in_answers_set(user_id):
            content = ("–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üåü"
                       "\n\n–ù–∞–±–∏—Ä–∞–π—Ç–µ—Å—å —Å–∏–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ!"
                       "\n\nüçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\n")
            content += diet_for_today(user_id)
            await bot.send_message(chat_id=user_id, text=content)

        elif pd.notna(trainings_text) and not check_user_in_answers_set(user_id):
            content = ("–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ú–æ–∂–µ—Ç —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n\n"
                       "‚ùóÔ∏è –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Ç–∞–∫ –±–æ—Ç —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å üí¨", callback_data="go_to_workout_survey")]])
            await bot.send_message(chat_id=user_id, text=content, reply_markup=keyboard)

        else:
            content = ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏!"
                       "\n\nüçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\n")
            content += diet_for_today(user_id)
            await bot.send_message(chat_id=user_id, text=content)


async def enable_notifications(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id

    for hour in hours:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        scheduler.add_job(
            send_notification,
            CronTrigger(hour=hour, minute=0),
            args=[bot, user_id, hour],
            id=f"notification_{user_id}_{hour}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
            replace_existing=True                 # –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        )
    
    await callback_query.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –∏ 18:00.")

    if not check_user_in_reminders(user_id):
        notifications_enabled_users.add(user_id)


async def disable_notifications(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    remove_notifications(user_id)

    await callback_query.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå")


def remove_notifications(user_id: int):
    for hour in hours:
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            scheduler.remove_job(f"notification_{user_id}_{hour}")
        except JobLookupError:
            pass
    
    if check_user_in_reminders(user_id):
        notifications_enabled_users.discard(user_id)


async def on_startup_reminders():
    scheduler.start()
