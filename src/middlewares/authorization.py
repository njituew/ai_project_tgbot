from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from src.registration import RegistrationStates, EXCEL_FILE
from src.survey_for_training import TrainingStates
from src.my_profile import UpdateProfile
import pandas as pd


async def check_registered_boolean(user_id: str) -> bool:
    df = pd.read_excel(EXCEL_FILE)
    is_registered = not df[df["ID"] == user_id].empty
    
    return is_registered


class AuthorizationMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    async def __call__(self, handler, event, data: dict):
        if isinstance(event, Message):
            user_id = event.from_user.id
            if not event.text:
                await data['bot'].send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π.")
                return
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        else:
            user_id = None
            

        if not user_id:
            return await handler(event, data)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start
        if isinstance(event, Message) and event.text == "/start":
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        fsm_context: FSMContext = data.get("state")
        if fsm_context:
            state = await fsm_context.get_state()
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if state in [
                RegistrationStates.waiting_for_name,
                RegistrationStates.waiting_for_gender,
                RegistrationStates.waiting_for_age,
                RegistrationStates.waiting_for_height,
                RegistrationStates.waiting_for_weight,
            ]:
                if isinstance(event, Message) and event.text.startswith("/"):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
                return await handler(event, data)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            button_texts = [
                "–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèãÔ∏è‚Äç‚ôÇÔ∏è", "–ú–æ–π –ø–ª–∞–Ω üìã", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π üìö",
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§", "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà", "–û–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üí¨"
            ]
            
            if state == TrainingStates.waiting_for_wishes:
                if isinstance(event, Message) and (event.text.startswith("/") or event.text in button_texts):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return
                return await handler(event, data)
            
            if state == UpdateProfile.waiting_for_update_value:
                if isinstance(event, Message) and (event.text.startswith("/") or event.text in button_texts):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return
                return await handler(event, data)
            
            if state == UpdateProfile.waiting_for_bot_score:
                if isinstance(event, Message) and event.text.startswith("/"):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return
                return await handler(event, data)
                

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫—ç—à
        if not await check_registered_boolean(user_id):
            text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.\n\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
            if isinstance(event, Message):
                await event.answer(text)
            elif isinstance(event, CallbackQuery):
                await event.message.answer(text)
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)
