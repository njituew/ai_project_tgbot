from aiogram import BaseMiddleware
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from src.registration import RegistrationStates
from src.survey_for_training import TrainingStates
from src.my_profile import UpdateProfile
from src.my_statistics import StatisticsState


class StateProtectionMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–æ–∫/–æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    async def __call__(self, handler, event, data: dict):
        fsm_context: FSMContext = data.get("state")
        if fsm_context:
            state = await fsm_context.get_state()

            if state in [
                RegistrationStates.waiting_for_name,
                RegistrationStates.waiting_for_gender,
                RegistrationStates.waiting_for_age,
                RegistrationStates.waiting_for_height,
                RegistrationStates.waiting_for_weight,
            ]:
                if isinstance(event, Message) and event.text.startswith("/"):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return
                return await handler(event, data)
            
            button_texts = [
                "–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèãÔ∏è‚Äç‚ôÇÔ∏è", "–ú–æ–π –ø–ª–∞–Ω üìã", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π üìö",
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§", "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà", "–û–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üí¨"
            ]

            cmds_without_ai_way = [
                "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π üìö", "/exercises",
                "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§", "/commands", "/my_profile", "/update_profile", "/start", "/menu"
            ]
            
            if state == TrainingStates.waiting_for_wishes:
                if isinstance(event, Message) and (event.text.startswith("/") or event.text in button_texts):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return
                return await handler(event, data)
            
            if state in [TrainingStates.creating_training_plan, StatisticsState.creating_statistics]:
                if isinstance(event, Message) and not event.text in cmds_without_ai_way:
                    await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
                    return
                return await handler(event, data)
            
            if state == UpdateProfile.waiting_for_update_value:
                if isinstance(event, Message) and (event.text.startswith("/") or event.text in button_texts):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return
                return await handler(event, data)
            
            if state == UpdateProfile.waiting_for_bot_score:
                if isinstance(event, Message) and event.text.startswith("/"):
                    await event.answer("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return
                return await handler(event, data)
            
        return await handler(event, data)