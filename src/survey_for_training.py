from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram import types


class TrainingSurvey(StatesGroup):
    goal = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    level = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    location = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫


def create_goal_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã üí™", callback_data="goal_mass")],
        [InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ üèÉ", callback_data="goal_loss")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã ü§∏", callback_data="goal_maintenance")]
    ])


def create_level_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–∏—á–æ–∫ ü•â", callback_data="level_beginner")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π ü•à", callback_data="level_intermediate")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª ü•á", callback_data="level_pro")]
    ])


def create_location_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–º üè†", callback_data="location_home")],
        [InlineKeyboardButton(text="–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª üèãÔ∏è", callback_data="location_gym")]
    ])


async def start_survey(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?", reply_markup=create_goal_keyboard())
    await state.set_state(TrainingSurvey.goal)


async def set_goal(callback_query: types.CallbackQuery, state: FSMContext):
    goal_mapping = {
        "goal_mass": "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
        "goal_loss": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        "goal_maintenance": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    selected_goal = goal_mapping[callback_query.data]
    await state.update_data(goal=selected_goal)
    await callback_query.message.edit_text(
        "–ö–∞–∫–æ–≤ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å?", reply_markup=create_level_keyboard()
    )
    await state.set_state(TrainingSurvey.level)


async def set_level(callback_query: types.CallbackQuery, state: FSMContext):
    level_mapping = {
        "level_beginner": "–ù–æ–≤–∏—á–æ–∫",
        "level_intermediate": "–°—Ä–µ–¥–Ω–∏–π",
        "level_pro": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    selected_level = level_mapping[callback_query.data]
    await state.update_data(level=selected_level)
    await callback_query.message.edit_text(
        "–ì–¥–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?", reply_markup=create_location_keyboard()
    )
    await state.set_state(TrainingSurvey.location)


async def set_location(callback_query: types.CallbackQuery, state: FSMContext):
    location_mapping = {
        "location_home": "–î–æ–º",
        "location_gym": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –∑–∞–ª"
    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    selected_location = location_mapping[callback_query.data]
    await state.update_data(location=selected_location)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    await callback_query.message.edit_text(
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –í–æ—Ç –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"–¶–µ–ª—å: {data['goal']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {data['level']}\n"
        f"–ú–µ—Å—Ç–æ: {data['location']}"
    )
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM