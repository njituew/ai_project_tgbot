from src.utils import create_trainings_table, create_diets_table, remove_user
import pandas as pd

from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram import types

from src.ai_generation import generate_schedule


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
EXCEL_FILE_TRAINING = "data/trainings.xlsx"
EXCEL_FILE_DIET = "data/diets.xlsx"


# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª Excel —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ
create_trainings_table(EXCEL_FILE_TRAINING)
create_diets_table(EXCEL_FILE_DIET)


def check_training(user_id: str) -> bool:
    df = pd.read_excel(EXCEL_FILE_TRAINING)  #, engine="openpyxl"
    user = df[df["ID"] == user_id]
    if not user.empty:
        return True
    return False


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ
class TrainingSurvey(StatesGroup):
    new_training = State()
    goal = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    level = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    location = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫


def create_new_training_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üÜï", callback_data="yes")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel")],
    ])


def create_goal_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã üí™", callback_data="goal_mass")],
        [InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ üèÉ", callback_data="goal_loss")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã ü§∏", callback_data="goal_maintenance")]
    ])


def create_level_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–∏—á–æ–∫ ü•â", callback_data="level_beginner")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π ü•à", callback_data="level_intermediate")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª ü•á", callback_data="level_pro")]
    ])


def create_location_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–º üè†", callback_data="location_home")],
        [InlineKeyboardButton(text="–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª üèãÔ∏è", callback_data="location_gym")]
    ])


async def start_survey(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if check_training(user_id):
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?",
            reply_markup=create_new_training_keyboard()
        )
        await state.set_state(TrainingSurvey.new_training)
    else:
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?", reply_markup=create_goal_keyboard())
        await state.set_state(TrainingSurvey.goal)


async def new_training(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "yes":
        user_id = callback_query.from_user.id
        remove_user(EXCEL_FILE_TRAINING, user_id)
        remove_user(EXCEL_FILE_DIET, user_id)
        
        await callback_query.message.edit_text(
            "–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?", reply_markup=create_goal_keyboard()
        )
        await state.set_state(TrainingSurvey.goal)
    else:
        await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM


async def set_goal(callback_query: types.CallbackQuery, state: FSMContext):
    goal_mapping = {
        "goal_mass": "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
        "goal_loss": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        "goal_maintenance": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    }
    selected_goal = goal_mapping[callback_query.data]
    await state.update_data(goal=selected_goal)
    await callback_query.message.edit_text(
        "–ö–∞–∫–æ–≤ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å?", reply_markup=create_level_keyboard()
    )
    await state.set_state(TrainingSurvey.level)


async def set_level(callback_query: types.CallbackQuery, state: FSMContext):
    level_mapping = {
        "level_beginner": "–ù–æ–≤–∏—á–æ–∫",
        "level_intermediate": "–°—Ä–µ–¥–Ω–∏–π",
        "level_pro": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
    }
    selected_level = level_mapping[callback_query.data]
    await state.update_data(level=selected_level)
    await callback_query.message.edit_text(
        "–ì–¥–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?", reply_markup=create_location_keyboard()
    )
    await state.set_state(TrainingSurvey.location)


async def set_location(callback_query: types.CallbackQuery, state: FSMContext):
    location_mapping = {
        "location_home": "–î–æ–º",
        "location_gym": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –∑–∞–ª"
    }
    selected_location = location_mapping[callback_query.data]
    await state.update_data(location=selected_location)
    
    await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫... ‚öôÔ∏è")

    user_data = await state.get_data()
    training_json = generate_schedule(user_data)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    df = pd.read_excel(EXCEL_FILE_TRAINING)
    training_data = pd.DataFrame([{
        "ID": callback_query.from_user.id,
        "monday": training_json["monday"]["workout"],
        "tuesday": training_json["tuesday"]["workout"],
        "wednesday": training_json["wednesday"]["workout"],
        "thursday": training_json["thursday"]["workout"],
        "friday": training_json["friday"]["workout"],
        "saturday": training_json["saturday"]["workout"],
        "sunday": training_json["sunday"]["workout"]
    }])
    df = pd.concat([df, training_data], ignore_index=True)
    df.to_excel(EXCEL_FILE_TRAINING, index=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∏–µ—Ç–æ–π
    df = pd.read_excel(EXCEL_FILE_DIET)
    diet_data = pd.DataFrame([{
        "ID": callback_query.from_user.id,
        "monday": training_json["monday"]["diet"],
        "tuesday": training_json["tuesday"]["diet"],
        "wednesday": training_json["wednesday"]["diet"],
        "thursday": training_json["thursday"]["diet"],
        "friday": training_json["friday"]["diet"],
        "saturday": training_json["saturday"]["diet"],
        "sunday": training_json["sunday"]["diet"]
    }])
    df = pd.concat([df, diet_data], ignore_index=True)
    df.to_excel(EXCEL_FILE_DIET, index=False)
    
    await callback_query.message.answer("–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üëç")
    
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    