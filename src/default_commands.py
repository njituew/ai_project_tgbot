from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand

from src.registration import check_registered, RegistrationStates
from src.ai_generation import simple_message_to_ai
from src.my_profile import get_info
from src.survey_for_training import check_training, TrainingStates, set_wishes
from src.my_plan import get_plan


'''
–ö–æ–º–∞–Ω–¥–∞ /start
'''
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = check_registered(user_id)
    if user_name:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!\n\n/menu - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –±–æ—Ç–∞")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        await state.set_state(RegistrationStates.waiting_for_name)


'''
–ö–æ–º–∞–Ω–¥–∞ /menu
'''
async def cmd_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèãÔ∏è‚Äç‚ôÇÔ∏è")],
            [KeyboardButton(text="–ú–æ–π –ø–ª–∞–Ω üìã"), KeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞")],
            [KeyboardButton(text="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üìö")],
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"), KeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà")],
            [KeyboardButton(text="–û–ø—Ä–æ—Å üí¨")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ", reply_markup=keyboard)


'''
–ö–æ–º–∞–Ω–¥–∞ /commands
'''
async def cmd_commands(message: types.Message):
    await message.answer(
        f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
        f"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        f"/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"/generate_plan - –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        f"/my_plan - –û—Ç–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        f"/exercises - –û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        f"/reminder - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        f"/my_profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"
        f"/update_profile - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
    )


async def simple_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∂–µ–ª–∞–Ω–∏–π, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_state == TrainingStates.waiting_for_wishes:
        await set_wishes(message, state)
        return
    
    text = message.text
    if text in ("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà"):
        await message.answer(text)
        return

    user_id = message.from_user.id
    user_info = get_info(user_id)
    user_training = get_plan(user_id) if check_training(user_id) else {}
    await message.answer(simple_message_to_ai(text, user_info, user_training))


async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="generate_plan", description="–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"),
        BotCommand(command="my_plan", description="–û—Ç–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"),
        BotCommand(command="exercises", description="–û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"),
        BotCommand(command="reminder", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"),
        BotCommand(command="my_profile", description="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="update_profile", description="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="commands", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)
