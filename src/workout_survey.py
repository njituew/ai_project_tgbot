from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from typing import Union
import pandas as pd
import datetime


EXCEL_FILE_TRAINING = "data/trainings.xlsx"

scheduler = AsyncIOScheduler()
users_with_answers = set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–æ—Å
def check_user_in_answers_set(user_id: int):
    return user_id in users_with_answers


def check_training(user_id: str) -> bool:
    df = pd.read_excel(EXCEL_FILE_TRAINING)
    user = df[df["ID"] == user_id]
    return not user.empty


def training_for_today(user_id: int):
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    trainings_df = pd.read_excel(EXCEL_FILE_TRAINING)

    # –°—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º ID
    trainings_info = trainings_df[trainings_df["ID"] == user_id]

    # –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    trainings_text = trainings_info.iloc[0].get(datetime.datetime.today().strftime("%A").lower())

    return trainings_text


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def open_workout_survey(event: Union[types.Message, types.CallbackQuery]):
    user_id = event.from_user.id

    if check_training(user_id):
        if user_id in users_with_answers:
            await event.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å") # –ü–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ type == types.Message
        else:
            if not pd.notna(training_for_today(user_id)):
                await event.answer("–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ü•±") # –ü–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ type == types.Message
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–µ—Ç, –Ω–µ –≤—Å–µ", callback_data="some_exercises_are_completed"),
                    InlineKeyboardButton(text="–î–∞, –≤—Å–µ", callback_data="all_exercises_are_completed")],
                    [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è –±–µ–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="not_today")],
                    [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ", callback_data="proceed_to_survey_later")]
                ])
                if isinstance(event, types.CallbackQuery):
                    await event.message.edit_text(
                        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è?\n\n",
                        reply_markup=keyboard
                    )
                elif isinstance(event, types.Message):
                    await event.answer(
                        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è?\n\n",
                        reply_markup=keyboard
                    )
    else:  # –ü–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ type == types.Message
        await event.answer(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏ –¥–æ–±–∏–≤–∞–π—Ç–µ—Å—å —É—Å–ø–µ—Ö–æ–≤ –≤–º–µ—Å—Ç–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! üèÜ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèãÔ∏è‚Äç‚ôÇÔ∏è", callback_data="reminders_new_training")]
            ])
        )



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–ù–µ—Ç, –Ω–µ –≤—Å–µ"
async def some_exercises(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await callback_query.message.edit_text("–ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî —ç—Ç–æ —à–∞–≥ –≤–ø–µ—Ä—ë–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –≤—Å—ë –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ! ‚ú®"
                                           "\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. "
                                           "–ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å.")
    users_with_answers.add(user_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–î–∞, –≤—Å–µ"
async def all_exercises(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await callback_query.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –≤—ã –º–æ–ª–æ–¥–µ—Ü! üéâ"
                                           "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. –ü–æ–º–Ω–∏—Ç–µ: —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üöÄ")
    users_with_answers.add(user_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
async def without_exercises(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await callback_query.message.edit_text("–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –æ—Ç–¥—ã—Ö ‚Äî —Ç–æ–∂–µ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞! üõå\n"
                                           "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã üòä")
    users_with_answers.add(user_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ"
async def defer_survey(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–û–ø—Ä–æ—Å –æ—Ç–ª–æ–∂–µ–Ω üïê")